from collections.abc import Iterable, Mapping
from decimal import Decimal
from re import Pattern
from typing import Any
from typing_extensions import Literal, NotRequired, TypedDict

from .adjacency_graphs import _Graph

class _Match(TypedDict):
    pattern: Literal["dictionary", "spatial", "repeat", "sequence", "regex", "date"]
    token: str
    i: int
    j: int
    guesses: NotRequired[int]  # all patterns except 'date'
    guesses_log10: NotRequired[float]  # all patterns except 'date'

    # pattern == 'date'
    separator: NotRequired[str]
    year: NotRequired[int]
    month: NotRequired[int]
    day: NotRequired[int]

    # pattern == 'dictionary'
    matched_word: NotRequired[str]
    dictionary_name: NotRequired[str]
    l33t: NotRequired[bool]
    reversed: NotRequired[bool]
    rank: NotRequired[int]
    base_guesses: NotRequired[int | Decimal]  # Decimal for 'repeat', see below
    uppercase_variations: NotRequired[int]
    l33t_variations: NotRequired[int]

    # pattern == 'spatial'
    turns: NotRequired[int]

    # pattern == 'repeat'
    base_token: NotRequired[str]
    # base_guesse